#!/bin/sh -ef

# publish: publishes build results to a certain repository.
#
# Copyright (C) 2016-2017 Kaitai Project
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

GH_USER=kaitai-io
GH_REPO_NAME=ci_artifacts
GH_REPO_BRANCH="$TARGET/$VARIETY"

export GIT_AUTHOR_NAME='Kaitai Bot'
export GIT_AUTHOR_EMAIL='kaitai-bot@kaitai.io'
export GIT_COMMITTER_NAME='Kaitai Bot'
export GIT_COMMITTER_EMAIL='kaitai-bot@kaitai.io'

if [ -z "$BOT_SSH_KEY" ]; then
	echo "BOT_SSH_KEY is not set!"
	exit 1
fi

unset SSH_AGENT_PID SSH_AUTH_SOCK

echo -n 'Setting up bot key... '
echo "$BOT_SSH_KEY" | base64 --decode >$HOME/bot_id
chmod 600 $HOME/bot_id
echo OK

echo -n 'Checking if key looks valid... '
key_head=$(head -n1 $HOME/bot_id)
if [ "$key_head" != '-----BEGIN RSA PRIVATE KEY-----' ]; then
	echo 'Nope, key seems to be invalid'
	exit 1
fi
echo -n 'OK, '
sha1sum $HOME/bot_id

# Alas, it seems that Travis CI uses ancient git that doesn't support this
#export GIT_SSH_COMMAND="ssh -i $HOME/bot_id"

# Squelch long git push strategy explanations
git config --global push.default simple

echo -n 'Setting up ssh wrapper... '
cat >$HOME/git-ssh <<__EOF__
#!/bin/sh -ef
ssh -i "$HOME/bot_id" "\$@"
__EOF__
chmod a+x $HOME/git-ssh
export GIT_SSH="$HOME/git-ssh"
echo 'OK'

echo 'Cloning website repo...'
if git clone --branch="$GH_REPO_BRANCH" git@github.com:"$GH_USER"/"$GH_REPO_NAME".git; then
	echo "OK"
else
	echo "Branch seems to be not available => trying to create it"
	git clone git@github.com:"$GH_USER"/"$GH_REPO_NAME".git
	cd "$GH_REPO_NAME"
	git checkout -b "$GH_REPO_BRANCH"
	cd ..
fi

echo 'Updating the files...'
rsync --delete-after -c --exclude=.git --exclude=.travis.yml -r -v tests/test_out "$GH_REPO_NAME"

echo 'Adding and committing...'
cd "$GH_REPO_NAME"
git add --all .
git commit -m "Submitted results from Travis build"

echo 'Pushing...'
git push -u origin "$GH_REPO_BRANCH"

echo -n 'Cleaning up the key and wrapper... '
rm "$HOME/bot_id" "$HOME/git-ssh"
echo OK
